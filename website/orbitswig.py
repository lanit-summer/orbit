# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_orbit', [dirname(__file__)])
        except ImportError:
            import _orbit
            return _orbit
        if fp is not None:
            try:
                _mod = imp.load_module('_orbit', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _orbit = swig_import_helper()
    del swig_import_helper
else:
    import _orbit
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Rotation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rotation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rotationAroundX"] = _orbit.Rotation_rotationAroundX_set
    __swig_getmethods__["rotationAroundX"] = _orbit.Rotation_rotationAroundX_get
    if _newclass:rotationAroundX = _swig_property(_orbit.Rotation_rotationAroundX_get, _orbit.Rotation_rotationAroundX_set)
    __swig_setmethods__["rotationAroundY"] = _orbit.Rotation_rotationAroundY_set
    __swig_getmethods__["rotationAroundY"] = _orbit.Rotation_rotationAroundY_get
    if _newclass:rotationAroundY = _swig_property(_orbit.Rotation_rotationAroundY_get, _orbit.Rotation_rotationAroundY_set)
    __swig_setmethods__["rotationAroundZ"] = _orbit.Rotation_rotationAroundZ_set
    __swig_getmethods__["rotationAroundZ"] = _orbit.Rotation_rotationAroundZ_get
    if _newclass:rotationAroundZ = _swig_property(_orbit.Rotation_rotationAroundZ_get, _orbit.Rotation_rotationAroundZ_set)
    def __init__(self): 
        this = _orbit.new_Rotation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _orbit.delete_Rotation
    __del__ = lambda self : None;
Rotation_swigregister = _orbit.Rotation_swigregister
Rotation_swigregister(Rotation)
cvar = _orbit.cvar
G = cvar.G
EarthMass = cvar.EarthMass
EarthRadius = cvar.EarthRadius
ZeroCelsius = cvar.ZeroCelsius
AtmosphereBoundary = cvar.AtmosphereBoundary
SeaLevelAirDensity = cvar.SeaLevelAirDensity
g = cvar.g

class ShipPosition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShipPosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShipPosition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _orbit.ShipPosition_position_set
    __swig_getmethods__["position"] = _orbit.ShipPosition_position_get
    if _newclass:position = _swig_property(_orbit.ShipPosition_position_get, _orbit.ShipPosition_position_set)
    __swig_setmethods__["orientation"] = _orbit.ShipPosition_orientation_set
    __swig_getmethods__["orientation"] = _orbit.ShipPosition_orientation_get
    if _newclass:orientation = _swig_property(_orbit.ShipPosition_orientation_get, _orbit.ShipPosition_orientation_set)
    __swig_setmethods__["speedFirst"] = _orbit.ShipPosition_speedFirst_set
    __swig_getmethods__["speedFirst"] = _orbit.ShipPosition_speedFirst_get
    if _newclass:speedFirst = _swig_property(_orbit.ShipPosition_speedFirst_get, _orbit.ShipPosition_speedFirst_set)
    __swig_setmethods__["moment"] = _orbit.ShipPosition_moment_set
    __swig_getmethods__["moment"] = _orbit.ShipPosition_moment_get
    if _newclass:moment = _swig_property(_orbit.ShipPosition_moment_get, _orbit.ShipPosition_moment_set)
    def __init__(self): 
        this = _orbit.new_ShipPosition()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _orbit.delete_ShipPosition
    __del__ = lambda self : None;
ShipPosition_swigregister = _orbit.ShipPosition_swigregister
ShipPosition_swigregister(ShipPosition)

class PartOfFlightPlan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartOfFlightPlan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PartOfFlightPlan, name)
    __repr__ = _swig_repr
    __swig_setmethods__["delayTime"] = _orbit.PartOfFlightPlan_delayTime_set
    __swig_getmethods__["delayTime"] = _orbit.PartOfFlightPlan_delayTime_get
    if _newclass:delayTime = _swig_property(_orbit.PartOfFlightPlan_delayTime_get, _orbit.PartOfFlightPlan_delayTime_set)
    __swig_setmethods__["impulseValue"] = _orbit.PartOfFlightPlan_impulseValue_set
    __swig_getmethods__["impulseValue"] = _orbit.PartOfFlightPlan_impulseValue_get
    if _newclass:impulseValue = _swig_property(_orbit.PartOfFlightPlan_impulseValue_get, _orbit.PartOfFlightPlan_impulseValue_set)
    __swig_setmethods__["rotateValue"] = _orbit.PartOfFlightPlan_rotateValue_set
    __swig_getmethods__["rotateValue"] = _orbit.PartOfFlightPlan_rotateValue_get
    if _newclass:rotateValue = _swig_property(_orbit.PartOfFlightPlan_rotateValue_get, _orbit.PartOfFlightPlan_rotateValue_set)
    def __init__(self): 
        this = _orbit.new_PartOfFlightPlan()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _orbit.delete_PartOfFlightPlan
    __del__ = lambda self : None;
PartOfFlightPlan_swigregister = _orbit.PartOfFlightPlan_swigregister
PartOfFlightPlan_swigregister(PartOfFlightPlan)

class ShipParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShipParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShipParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shipEdgeLength"] = _orbit.ShipParams_shipEdgeLength_set
    __swig_getmethods__["shipEdgeLength"] = _orbit.ShipParams_shipEdgeLength_get
    if _newclass:shipEdgeLength = _swig_property(_orbit.ShipParams_shipEdgeLength_get, _orbit.ShipParams_shipEdgeLength_set)
    __swig_setmethods__["shipMass"] = _orbit.ShipParams_shipMass_set
    __swig_getmethods__["shipMass"] = _orbit.ShipParams_shipMass_get
    if _newclass:shipMass = _swig_property(_orbit.ShipParams_shipMass_get, _orbit.ShipParams_shipMass_set)
    __swig_setmethods__["fuelMass"] = _orbit.ShipParams_fuelMass_set
    __swig_getmethods__["fuelMass"] = _orbit.ShipParams_fuelMass_get
    if _newclass:fuelMass = _swig_property(_orbit.ShipParams_fuelMass_get, _orbit.ShipParams_fuelMass_set)
    __swig_setmethods__["maxRotation"] = _orbit.ShipParams_maxRotation_set
    __swig_getmethods__["maxRotation"] = _orbit.ShipParams_maxRotation_get
    if _newclass:maxRotation = _swig_property(_orbit.ShipParams_maxRotation_get, _orbit.ShipParams_maxRotation_set)
    __swig_setmethods__["maxFuelUsagePerSec"] = _orbit.ShipParams_maxFuelUsagePerSec_set
    __swig_getmethods__["maxFuelUsagePerSec"] = _orbit.ShipParams_maxFuelUsagePerSec_get
    if _newclass:maxFuelUsagePerSec = _swig_property(_orbit.ShipParams_maxFuelUsagePerSec_get, _orbit.ShipParams_maxFuelUsagePerSec_set)
    __swig_setmethods__["impulsePerFuel"] = _orbit.ShipParams_impulsePerFuel_set
    __swig_getmethods__["impulsePerFuel"] = _orbit.ShipParams_impulsePerFuel_get
    if _newclass:impulsePerFuel = _swig_property(_orbit.ShipParams_impulsePerFuel_get, _orbit.ShipParams_impulsePerFuel_set)
    __swig_setmethods__["flightPlan"] = _orbit.ShipParams_flightPlan_set
    __swig_getmethods__["flightPlan"] = _orbit.ShipParams_flightPlan_get
    if _newclass:flightPlan = _swig_property(_orbit.ShipParams_flightPlan_get, _orbit.ShipParams_flightPlan_set)
    __swig_setmethods__["maxOverload"] = _orbit.ShipParams_maxOverload_set
    __swig_getmethods__["maxOverload"] = _orbit.ShipParams_maxOverload_get
    if _newclass:maxOverload = _swig_property(_orbit.ShipParams_maxOverload_get, _orbit.ShipParams_maxOverload_set)
    __swig_setmethods__["maxHeating"] = _orbit.ShipParams_maxHeating_set
    __swig_getmethods__["maxHeating"] = _orbit.ShipParams_maxHeating_get
    if _newclass:maxHeating = _swig_property(_orbit.ShipParams_maxHeating_get, _orbit.ShipParams_maxHeating_set)
    def __init__(self): 
        this = _orbit.new_ShipParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _orbit.delete_ShipParams
    __del__ = lambda self : None;
ShipParams_swigregister = _orbit.ShipParams_swigregister
ShipParams_swigregister(ShipParams)

class Quants(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quants, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quants, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numberOfQuants"] = _orbit.Quants_numberOfQuants_set
    __swig_getmethods__["numberOfQuants"] = _orbit.Quants_numberOfQuants_get
    if _newclass:numberOfQuants = _swig_property(_orbit.Quants_numberOfQuants_get, _orbit.Quants_numberOfQuants_set)
    __swig_setmethods__["quantSizeOfSec"] = _orbit.Quants_quantSizeOfSec_set
    __swig_getmethods__["quantSizeOfSec"] = _orbit.Quants_quantSizeOfSec_get
    if _newclass:quantSizeOfSec = _swig_property(_orbit.Quants_quantSizeOfSec_get, _orbit.Quants_quantSizeOfSec_set)
    def __init__(self): 
        this = _orbit.new_Quants()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _orbit.delete_Quants
    __del__ = lambda self : None;
Quants_swigregister = _orbit.Quants_swigregister
Quants_swigregister(Quants)

class ReturnValues(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnValues, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnValues, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _orbit.ReturnValues_position_set
    __swig_getmethods__["position"] = _orbit.ReturnValues_position_get
    if _newclass:position = _swig_property(_orbit.ReturnValues_position_get, _orbit.ReturnValues_position_set)
    __swig_setmethods__["speed"] = _orbit.ReturnValues_speed_set
    __swig_getmethods__["speed"] = _orbit.ReturnValues_speed_get
    if _newclass:speed = _swig_property(_orbit.ReturnValues_speed_get, _orbit.ReturnValues_speed_set)
    def __init__(self): 
        this = _orbit.new_ReturnValues()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _orbit.delete_ReturnValues
    __del__ = lambda self : None;
ReturnValues_swigregister = _orbit.ReturnValues_swigregister
ReturnValues_swigregister(ReturnValues)


def computeFlightPlan(*args):
  return _orbit.computeFlightPlan(*args)
computeFlightPlan = _orbit.computeFlightPlan
class vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _orbit.vec_x_set
    __swig_getmethods__["x"] = _orbit.vec_x_get
    if _newclass:x = _swig_property(_orbit.vec_x_get, _orbit.vec_x_set)
    __swig_setmethods__["y"] = _orbit.vec_y_set
    __swig_getmethods__["y"] = _orbit.vec_y_get
    if _newclass:y = _swig_property(_orbit.vec_y_get, _orbit.vec_y_set)
    __swig_setmethods__["z"] = _orbit.vec_z_set
    __swig_getmethods__["z"] = _orbit.vec_z_get
    if _newclass:z = _swig_property(_orbit.vec_z_get, _orbit.vec_z_set)
    def getScalar(self): return _orbit.vec_getScalar(self)
    def multiplyWithDouble(self, *args): return _orbit.vec_multiplyWithDouble(self, *args)
    def rotate(self, *args): return _orbit.vec_rotate(self, *args)
    def multiply(self, *args): return _orbit.vec_multiply(self, *args)
    def createQuaternion(self): return _orbit.vec_createQuaternion(self)
    def multiplyWithQuaternion(self, *args): return _orbit.vec_multiplyWithQuaternion(self, *args)
    def __eq__(self, *args): return _orbit.vec___eq__(self, *args)
    def __add__(self, *args): return _orbit.vec___add__(self, *args)
    def __mul__(self, *args): return _orbit.vec___mul__(self, *args)
    def __init__(self): 
        this = _orbit.new_vec()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _orbit.delete_vec
    __del__ = lambda self : None;
vec_swigregister = _orbit.vec_swigregister
vec_swigregister(vec)

class quaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, quaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, quaternion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _orbit.quaternion_w_set
    __swig_getmethods__["w"] = _orbit.quaternion_w_get
    if _newclass:w = _swig_property(_orbit.quaternion_w_get, _orbit.quaternion_w_set)
    __swig_setmethods__["x"] = _orbit.quaternion_x_set
    __swig_getmethods__["x"] = _orbit.quaternion_x_get
    if _newclass:x = _swig_property(_orbit.quaternion_x_get, _orbit.quaternion_x_set)
    __swig_setmethods__["y"] = _orbit.quaternion_y_set
    __swig_getmethods__["y"] = _orbit.quaternion_y_get
    if _newclass:y = _swig_property(_orbit.quaternion_y_get, _orbit.quaternion_y_set)
    __swig_setmethods__["z"] = _orbit.quaternion_z_set
    __swig_getmethods__["z"] = _orbit.quaternion_z_get
    if _newclass:z = _swig_property(_orbit.quaternion_z_get, _orbit.quaternion_z_set)
    def normalize(self): return _orbit.quaternion_normalize(self)
    def multiply(self, *args): return _orbit.quaternion_multiply(self, *args)
    def invert(self): return _orbit.quaternion_invert(self)
    def __init__(self): 
        this = _orbit.new_quaternion()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _orbit.delete_quaternion
    __del__ = lambda self : None;
quaternion_swigregister = _orbit.quaternion_swigregister
quaternion_swigregister(quaternion)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _orbit.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _orbit.SwigPyIterator_value(self)
    def incr(self, n=1): return _orbit.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _orbit.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _orbit.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _orbit.SwigPyIterator_equal(self, *args)
    def copy(self): return _orbit.SwigPyIterator_copy(self)
    def next(self): return _orbit.SwigPyIterator_next(self)
    def __next__(self): return _orbit.SwigPyIterator___next__(self)
    def previous(self): return _orbit.SwigPyIterator_previous(self)
    def advance(self, *args): return _orbit.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _orbit.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _orbit.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _orbit.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _orbit.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _orbit.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _orbit.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _orbit.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector_of_part_flight_plan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_part_flight_plan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_part_flight_plan, name)
    __repr__ = _swig_repr
    def iterator(self): return _orbit.vector_of_part_flight_plan_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _orbit.vector_of_part_flight_plan___nonzero__(self)
    def __bool__(self): return _orbit.vector_of_part_flight_plan___bool__(self)
    def __len__(self): return _orbit.vector_of_part_flight_plan___len__(self)
    def pop(self): return _orbit.vector_of_part_flight_plan_pop(self)
    def __getslice__(self, *args): return _orbit.vector_of_part_flight_plan___getslice__(self, *args)
    def __setslice__(self, *args): return _orbit.vector_of_part_flight_plan___setslice__(self, *args)
    def __delslice__(self, *args): return _orbit.vector_of_part_flight_plan___delslice__(self, *args)
    def __delitem__(self, *args): return _orbit.vector_of_part_flight_plan___delitem__(self, *args)
    def __getitem__(self, *args): return _orbit.vector_of_part_flight_plan___getitem__(self, *args)
    def __setitem__(self, *args): return _orbit.vector_of_part_flight_plan___setitem__(self, *args)
    def append(self, *args): return _orbit.vector_of_part_flight_plan_append(self, *args)
    def empty(self): return _orbit.vector_of_part_flight_plan_empty(self)
    def size(self): return _orbit.vector_of_part_flight_plan_size(self)
    def clear(self): return _orbit.vector_of_part_flight_plan_clear(self)
    def swap(self, *args): return _orbit.vector_of_part_flight_plan_swap(self, *args)
    def get_allocator(self): return _orbit.vector_of_part_flight_plan_get_allocator(self)
    def begin(self): return _orbit.vector_of_part_flight_plan_begin(self)
    def end(self): return _orbit.vector_of_part_flight_plan_end(self)
    def rbegin(self): return _orbit.vector_of_part_flight_plan_rbegin(self)
    def rend(self): return _orbit.vector_of_part_flight_plan_rend(self)
    def pop_back(self): return _orbit.vector_of_part_flight_plan_pop_back(self)
    def erase(self, *args): return _orbit.vector_of_part_flight_plan_erase(self, *args)
    def __init__(self, *args): 
        this = _orbit.new_vector_of_part_flight_plan(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _orbit.vector_of_part_flight_plan_push_back(self, *args)
    def front(self): return _orbit.vector_of_part_flight_plan_front(self)
    def back(self): return _orbit.vector_of_part_flight_plan_back(self)
    def assign(self, *args): return _orbit.vector_of_part_flight_plan_assign(self, *args)
    def resize(self, *args): return _orbit.vector_of_part_flight_plan_resize(self, *args)
    def insert(self, *args): return _orbit.vector_of_part_flight_plan_insert(self, *args)
    def reserve(self, *args): return _orbit.vector_of_part_flight_plan_reserve(self, *args)
    def capacity(self): return _orbit.vector_of_part_flight_plan_capacity(self)
    __swig_destroy__ = _orbit.delete_vector_of_part_flight_plan
    __del__ = lambda self : None;
vector_of_part_flight_plan_swigregister = _orbit.vector_of_part_flight_plan_swigregister
vector_of_part_flight_plan_swigregister(vector_of_part_flight_plan)

class vector_of_return_values(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_return_values, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_return_values, name)
    __repr__ = _swig_repr
    def iterator(self): return _orbit.vector_of_return_values_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _orbit.vector_of_return_values___nonzero__(self)
    def __bool__(self): return _orbit.vector_of_return_values___bool__(self)
    def __len__(self): return _orbit.vector_of_return_values___len__(self)
    def pop(self): return _orbit.vector_of_return_values_pop(self)
    def __getslice__(self, *args): return _orbit.vector_of_return_values___getslice__(self, *args)
    def __setslice__(self, *args): return _orbit.vector_of_return_values___setslice__(self, *args)
    def __delslice__(self, *args): return _orbit.vector_of_return_values___delslice__(self, *args)
    def __delitem__(self, *args): return _orbit.vector_of_return_values___delitem__(self, *args)
    def __getitem__(self, *args): return _orbit.vector_of_return_values___getitem__(self, *args)
    def __setitem__(self, *args): return _orbit.vector_of_return_values___setitem__(self, *args)
    def append(self, *args): return _orbit.vector_of_return_values_append(self, *args)
    def empty(self): return _orbit.vector_of_return_values_empty(self)
    def size(self): return _orbit.vector_of_return_values_size(self)
    def clear(self): return _orbit.vector_of_return_values_clear(self)
    def swap(self, *args): return _orbit.vector_of_return_values_swap(self, *args)
    def get_allocator(self): return _orbit.vector_of_return_values_get_allocator(self)
    def begin(self): return _orbit.vector_of_return_values_begin(self)
    def end(self): return _orbit.vector_of_return_values_end(self)
    def rbegin(self): return _orbit.vector_of_return_values_rbegin(self)
    def rend(self): return _orbit.vector_of_return_values_rend(self)
    def pop_back(self): return _orbit.vector_of_return_values_pop_back(self)
    def erase(self, *args): return _orbit.vector_of_return_values_erase(self, *args)
    def __init__(self, *args): 
        this = _orbit.new_vector_of_return_values(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _orbit.vector_of_return_values_push_back(self, *args)
    def front(self): return _orbit.vector_of_return_values_front(self)
    def back(self): return _orbit.vector_of_return_values_back(self)
    def assign(self, *args): return _orbit.vector_of_return_values_assign(self, *args)
    def resize(self, *args): return _orbit.vector_of_return_values_resize(self, *args)
    def insert(self, *args): return _orbit.vector_of_return_values_insert(self, *args)
    def reserve(self, *args): return _orbit.vector_of_return_values_reserve(self, *args)
    def capacity(self): return _orbit.vector_of_return_values_capacity(self)
    __swig_destroy__ = _orbit.delete_vector_of_return_values
    __del__ = lambda self : None;
vector_of_return_values_swigregister = _orbit.vector_of_return_values_swigregister
vector_of_return_values_swigregister(vector_of_return_values)

# This file is compatible with both classic and new-style classes.


